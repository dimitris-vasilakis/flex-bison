%{

    #include <stdio.h>
    #include <stdlib.h>
    //#include "tokens.h"
    #include "syntax.tab.h"

    int error_counter=0;
    int elementCount=0;

    void token_print(int token_id);
    void yyerror(const char* err);

%}

%option noyywrap
%option yylineno

DIGIT               [0-9]
LETTER              [a-zA-Z]
ALPHANUM            {LETTER}|{DIGIT}
TOKENID             {LETTER}[^<>/\ \t\n]*
TAG_START           "<"{TOKENID}
TAG_END             ">"
TAG_CLOSE           "</"{TOKENID}">"
SELF_CLOSING        "/>"
ATTRIBUTE           (" "|\t|\n){TOKENID}"="
ATTRIBUTE_VAL       """[^"]+["""]
COMMENT             "<!--"[^-]"-->"
TEXT                [^<> \t\r\n"][^<>"]*
/* text cant start with " /


%%

{TAG_START}         { token_print(T_TAG_START); yylval.strval = strdup(yytext); elementCount++;  return T_TAG_START; }
{TAG_END}           { token_print(T_TAG_END); return T_TAG_END; }
{TAG_CLOSE}         { token_print(T_TAG_CLOSE); return T_TAG_CLOSE; }
{SELF_CLOSING}      { token_print(T_SELF_CLOSING); return T_SELF_CLOSING; }
{ATTRIBUTE}         { token_print(T_ATTRIBUTE); return T_ATTRIBUTE; }
{ATTRIBUTE_VAL}     { token_print(T_ATTRIBUTE_VAL); return T_ATTRIBUTE_VAL; }
{COMMENT}           {return T_COMMENT; }
{TEXT}              { token_print(T_TEXT); return T_TEXT; }


" "                 {/ignore/}
[\n]                {/ignore/}
[\t]                {/ignore/}
[\r\n]              {/ignore/}
.                   {printf("Uknown\n"); }
<<EOF>>             {return 0; }

%%

/ Print function /
void token_print(int token_id) {
    printf("Found token %s (%d) at line %d\r\n", yytext, token_id, yylineno);
}

/ Error handling /
void yyerror(const char err) {
    error_counter++;
    printf("[Error - Line %d] %s\r\n", yylineno, err);

    if(error_counter == 1) {
        printf("Errors Found!\n");
        exit(EXIT_FAILURE);
    }

    yyless(1);
}